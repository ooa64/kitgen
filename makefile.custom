
ifneq (,$(findstring tdom,$(CUSTOM)))

tdom: build/tdom
build/tdom: build/tcl
	mkdir -p $@ && cd $@ && CFLAGS="$(CFLAGS)" && export CFLAGS && \
	  sh $(EXTDIR)/tdom/configure $(STATIC) $(TCLDIR) $(TDOM_OPTS) && \
	  $(MAKE) install

LDFLAGS += build/lib/tdom0*/*tdom*.a
CFLAGS  += -DKIT_INCLUDES_TDOM

endif

ifneq (,$(findstring tls,$(CUSTOM)))

tls: build/tls
build/tls: build/tcl
	mkdir -p $@ && cd $@ && CFLAGS="$(CFLAGS)" && export CFLAGS && \
	  sh $(EXTDIR)/tls/configure $(STATIC) $(TCLDIR) $(TLS_OPTS) && \
	  $(MAKE) install

LDFLAGS += build/lib/tcltls1*/*tcltls*.a -lssl -lcrypto
CFLAGS  += -DKIT_INCLUDES_TLS

endif

ifneq (,$(findstring yajltcl,$(CUSTOM)))

yajltcl: build/yajltcl
build/yajltcl: build/tcl
	mkdir -p $@ && cd $@ && CFLAGS="$(CFLAGS)" && export CFLAGS && \
	  sh $(EXTDIR)/yajltcl/configure $(STATIC) $(TCLDIR) $(YAJLTCL_OPTS) && \
	  $(MAKE) install

LDFLAGS += build/lib/yajltcl1*/*yajltcl1*.a -lyajl_s
CFLAGS  += -DKIT_INCLUDES_YAJLTCL

endif

ifneq (,$(findstring tcltdjson,$(CUSTOM)))

TDSHARED = no
TDHOME   = /opt/tdlib
ifneq ($(TDSHARED),no)
TDLDFLAGS	= -ltdjson
TDCFLAGS	=
else
TDLDFLAGS	= -ltdjson_static -ltdjson_private -ltdclient -ltdcore -ltdnet -ltdactor -ltddb -ltdsqlite -ltdapi -ltdutils -lstdc++ -lssl -lcrypto
TDCFLAGS	= -DTDJSON_STATIC_DEFINE
endif

TCLTDJSON_OPTS += --with-tdlib=$(TDHOME) --enable-tdshared=$(TDSHARED)

tcltdjson: build/tcltdjson
build/tcltdjson:
	mkdir -p $@ && cd $@ && CFLAGS="$(CFLAGS)" && export CFLAGS && \
	  sh $(EXTDIR)/tcltdjson/configure $(STATIC) $(TCLDIR) $(TCLTDJSON_OPTS) && \
	  $(MAKE) install

LDFLAGS += build/lib/tcltdjson0*/*tcltdjson*.a -L$(TDHOME)/lib $(TDLDFLAGS)
CFLAGS  += -DKIT_INCLUDES_TCLTDJSON $(TDCFLAGS)

endif

ifneq (,$(findstring tcldbf,$(CUSTOM)))

tcldbf: build/tcldbf
build/tcldbf: build/tcl
	mkdir -p $@ && cd $@ && CFLAGS="$(CFLAGS)" && export CFLAGS && \
	  sh $(EXTDIR)/tcldbf/configure $(STATIC) $(TCLDIR) $(TCLDBF_OPTS) && \
	  $(MAKE) install

LDFLAGS += build/lib/tcldbf2*/*tcldbf2*.a -lstdc++
CFLAGS  += -DKIT_INCLUDES_TCLDBF

endif

ifneq (,$(findstring tclcsv,$(CUSTOM)))

tclcsv: build/tclcsv
build/tclcsv: build/tcl
	mkdir -p $@ && cd $@ && CFLAGS="$(CFLAGS)" && export CFLAGS && \
	  sh $(EXTDIR)/tclcsv/configure $(STATIC) $(TCLDIR) $(TCLDBF_OPTS) && \
	  $(MAKE) install

LDFLAGS += build/lib/tclcsv2*/*tclcsv2*.a
CFLAGS  += -DKIT_INCLUDES_TCLCSV

endif

ifneq (,$(findstring xlsreader,$(CUSTOM)))

xlsreader: build/xlsreader
build/xlsreader: build/tcl
	mkdir -p $@ && cd $@ && CFLAGS="$(CFLAGS)" && export CFLAGS && \
	  sh $(EXTDIR)/tclxlsreader/configure $(STATIC) $(TCLDIR) $(XLSREADER_OPTS) && \
	  $(MAKE) install

LDFLAGS += build/lib/xlsreader1*/*xlsreader1*.a
CFLAGS  += -DKIT_INCLUDES_XLSREADER

endif

ifneq (,$(findstring tbcload,$(CUSTOM)))

tbcload: build/tbcload
build/tbcload: build/tcl
	mkdir -p $@ && cd $@ && echo PWD=`pwd` && CFLAGS="$(CFLAGS)" && export CFLAGS && \
	  sh $(EXTDIR)/tbcload/configure $(STATIC) $(TCLDIR) $(TBCLOAD_OPTS) && \
	  echo `pwd` && cp ../../../tcl/generic/tclCompile.h $(EXTDIR)/tbcload/ && $(MAKE) install

LDFLAGS += build/lib/tbcload*/*tbcload*.a
CFLAGS  += -DKIT_INCLUDES_TBCLOAD

endif

ifneq (,$(findstring parser,$(CUSTOM)))

parser: build/parser
build/parser: build/tcl
	mkdir -p $@ && cd $@ && CFLAGS="$(CFLAGS)" && export CFLAGS && \
	  sh $(EXTDIR)/tclprodebug/lib/tclparser/configure $(STATIC) $(TCLDIR) $(TCLPARSER_OPTS) && \
	  $(MAKE) all install

LDFLAGS += build/lib/tclparser*/*tclparser*.a
CFLAGS  += -DKIT_INCLUDES_TCLPARSER

endif

custom: $(CUSTOM)
